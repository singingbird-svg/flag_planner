# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from multi_bspline_opt/MultiBsplines.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg
import multi_bspline_opt.msg

class MultiBsplines(genpy.Message):
  _md5sum = "0a9ce0a6a663879c244f8d58ac09d0d8"
  _type = "multi_bspline_opt/MultiBsplines"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 drone_id_from

SendTraj[] traj
================================================================================
MSG: multi_bspline_opt/SendTraj
int32 drone_id
int64 traj_id
int32 order
int32 cps_num_
# int32 Dim_
# int32 TrajSampleRate
# float64 beta
time start_time


float64 start_pos_x
float64 start_pos_y
float64 start_vel_x
float64 start_vel_y
float64 end_pos_x
float64 end_pos_y
# float64 yaw_rate

geometry_msgs/Point[] control_pts
float64[] knots
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['drone_id_from','traj']
  _slot_types = ['int32','multi_bspline_opt/SendTraj[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       drone_id_from,traj

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MultiBsplines, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.drone_id_from is None:
        self.drone_id_from = 0
      if self.traj is None:
        self.traj = []
    else:
      self.drone_id_from = 0
      self.traj = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.drone_id_from
      buff.write(_get_struct_i().pack(_x))
      length = len(self.traj)
      buff.write(_struct_I.pack(length))
      for val1 in self.traj:
        _x = val1
        buff.write(_get_struct_iq2i().pack(_x.drone_id, _x.traj_id, _x.order, _x.cps_num_))
        _v1 = val1.start_time
        _x = _v1
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = val1
        buff.write(_get_struct_6d().pack(_x.start_pos_x, _x.start_pos_y, _x.start_vel_x, _x.start_vel_y, _x.end_pos_x, _x.end_pos_y))
        length = len(val1.control_pts)
        buff.write(_struct_I.pack(length))
        for val2 in val1.control_pts:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.knots)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.knots))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.traj is None:
        self.traj = None
      end = 0
      start = end
      end += 4
      (self.drone_id_from,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.traj = []
      for i in range(0, length):
        val1 = multi_bspline_opt.msg.SendTraj()
        _x = val1
        start = end
        end += 20
        (_x.drone_id, _x.traj_id, _x.order, _x.cps_num_,) = _get_struct_iq2i().unpack(str[start:end])
        _v2 = val1.start_time
        _x = _v2
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _x = val1
        start = end
        end += 48
        (_x.start_pos_x, _x.start_pos_y, _x.start_vel_x, _x.start_vel_y, _x.end_pos_x, _x.end_pos_y,) = _get_struct_6d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.control_pts = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.control_pts.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.knots = s.unpack(str[start:end])
        self.traj.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.drone_id_from
      buff.write(_get_struct_i().pack(_x))
      length = len(self.traj)
      buff.write(_struct_I.pack(length))
      for val1 in self.traj:
        _x = val1
        buff.write(_get_struct_iq2i().pack(_x.drone_id, _x.traj_id, _x.order, _x.cps_num_))
        _v3 = val1.start_time
        _x = _v3
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = val1
        buff.write(_get_struct_6d().pack(_x.start_pos_x, _x.start_pos_y, _x.start_vel_x, _x.start_vel_y, _x.end_pos_x, _x.end_pos_y))
        length = len(val1.control_pts)
        buff.write(_struct_I.pack(length))
        for val2 in val1.control_pts:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.knots)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.knots.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.traj is None:
        self.traj = None
      end = 0
      start = end
      end += 4
      (self.drone_id_from,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.traj = []
      for i in range(0, length):
        val1 = multi_bspline_opt.msg.SendTraj()
        _x = val1
        start = end
        end += 20
        (_x.drone_id, _x.traj_id, _x.order, _x.cps_num_,) = _get_struct_iq2i().unpack(str[start:end])
        _v4 = val1.start_time
        _x = _v4
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _x = val1
        start = end
        end += 48
        (_x.start_pos_x, _x.start_pos_y, _x.start_vel_x, _x.start_vel_y, _x.end_pos_x, _x.end_pos_y,) = _get_struct_6d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.control_pts = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.control_pts.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.knots = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        self.traj.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_iq2i = None
def _get_struct_iq2i():
    global _struct_iq2i
    if _struct_iq2i is None:
        _struct_iq2i = struct.Struct("<iq2i")
    return _struct_iq2i
