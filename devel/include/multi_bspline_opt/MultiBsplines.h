// Generated by gencpp from file multi_bspline_opt/MultiBsplines.msg
// DO NOT EDIT!


#ifndef MULTI_BSPLINE_OPT_MESSAGE_MULTIBSPLINES_H
#define MULTI_BSPLINE_OPT_MESSAGE_MULTIBSPLINES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <multi_bspline_opt/SendTraj.h>

namespace multi_bspline_opt
{
template <class ContainerAllocator>
struct MultiBsplines_
{
  typedef MultiBsplines_<ContainerAllocator> Type;

  MultiBsplines_()
    : drone_id_from(0)
    , traj()  {
    }
  MultiBsplines_(const ContainerAllocator& _alloc)
    : drone_id_from(0)
    , traj(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _drone_id_from_type;
  _drone_id_from_type drone_id_from;

   typedef std::vector< ::multi_bspline_opt::SendTraj_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::multi_bspline_opt::SendTraj_<ContainerAllocator> >> _traj_type;
  _traj_type traj;





  typedef boost::shared_ptr< ::multi_bspline_opt::MultiBsplines_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::multi_bspline_opt::MultiBsplines_<ContainerAllocator> const> ConstPtr;

}; // struct MultiBsplines_

typedef ::multi_bspline_opt::MultiBsplines_<std::allocator<void> > MultiBsplines;

typedef boost::shared_ptr< ::multi_bspline_opt::MultiBsplines > MultiBsplinesPtr;
typedef boost::shared_ptr< ::multi_bspline_opt::MultiBsplines const> MultiBsplinesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::multi_bspline_opt::MultiBsplines_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::multi_bspline_opt::MultiBsplines_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::multi_bspline_opt::MultiBsplines_<ContainerAllocator1> & lhs, const ::multi_bspline_opt::MultiBsplines_<ContainerAllocator2> & rhs)
{
  return lhs.drone_id_from == rhs.drone_id_from &&
    lhs.traj == rhs.traj;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::multi_bspline_opt::MultiBsplines_<ContainerAllocator1> & lhs, const ::multi_bspline_opt::MultiBsplines_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace multi_bspline_opt

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::multi_bspline_opt::MultiBsplines_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multi_bspline_opt::MultiBsplines_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multi_bspline_opt::MultiBsplines_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multi_bspline_opt::MultiBsplines_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multi_bspline_opt::MultiBsplines_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multi_bspline_opt::MultiBsplines_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::multi_bspline_opt::MultiBsplines_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0a9ce0a6a663879c244f8d58ac09d0d8";
  }

  static const char* value(const ::multi_bspline_opt::MultiBsplines_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0a9ce0a6a663879cULL;
  static const uint64_t static_value2 = 0x244f8d58ac09d0d8ULL;
};

template<class ContainerAllocator>
struct DataType< ::multi_bspline_opt::MultiBsplines_<ContainerAllocator> >
{
  static const char* value()
  {
    return "multi_bspline_opt/MultiBsplines";
  }

  static const char* value(const ::multi_bspline_opt::MultiBsplines_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::multi_bspline_opt::MultiBsplines_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 drone_id_from\n"
"\n"
"SendTraj[] traj\n"
"================================================================================\n"
"MSG: multi_bspline_opt/SendTraj\n"
"int32 drone_id\n"
"int64 traj_id\n"
"int32 order\n"
"int32 cps_num_\n"
"# int32 Dim_\n"
"# int32 TrajSampleRate\n"
"# float64 beta\n"
"time start_time\n"
"\n"
"\n"
"float64 start_pos_x\n"
"float64 start_pos_y\n"
"float64 start_vel_x\n"
"float64 start_vel_y\n"
"float64 end_pos_x\n"
"float64 end_pos_y\n"
"# float64 yaw_rate\n"
"\n"
"geometry_msgs/Point[] control_pts\n"
"float64[] knots\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::multi_bspline_opt::MultiBsplines_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::multi_bspline_opt::MultiBsplines_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.drone_id_from);
      stream.next(m.traj);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MultiBsplines_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::multi_bspline_opt::MultiBsplines_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::multi_bspline_opt::MultiBsplines_<ContainerAllocator>& v)
  {
    s << indent << "drone_id_from: ";
    Printer<int32_t>::stream(s, indent + "  ", v.drone_id_from);
    s << indent << "traj[]" << std::endl;
    for (size_t i = 0; i < v.traj.size(); ++i)
    {
      s << indent << "  traj[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::multi_bspline_opt::SendTraj_<ContainerAllocator> >::stream(s, indent + "    ", v.traj[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MULTI_BSPLINE_OPT_MESSAGE_MULTIBSPLINES_H
