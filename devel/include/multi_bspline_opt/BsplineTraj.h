// Generated by gencpp from file multi_bspline_opt/BsplineTraj.msg
// DO NOT EDIT!


#ifndef MULTI_BSPLINE_OPT_MESSAGE_BSPLINETRAJ_H
#define MULTI_BSPLINE_OPT_MESSAGE_BSPLINETRAJ_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace multi_bspline_opt
{
template <class ContainerAllocator>
struct BsplineTraj_
{
  typedef BsplineTraj_<ContainerAllocator> Type;

  BsplineTraj_()
    : drone_id(0)
    , traj_id(0)
    , start_time()
    , duration(0.0)
    , yaw(0.0)
    , yaw_rate(0.0)
    , position()
    , velocity()
    , acceleration()
    , current_seq(0)  {
    }
  BsplineTraj_(const ContainerAllocator& _alloc)
    : drone_id(0)
    , traj_id(0)
    , start_time()
    , duration(0.0)
    , yaw(0.0)
    , yaw_rate(0.0)
    , position(_alloc)
    , velocity(_alloc)
    , acceleration(_alloc)
    , current_seq(0)  {
  (void)_alloc;
    }



   typedef int32_t _drone_id_type;
  _drone_id_type drone_id;

   typedef int64_t _traj_id_type;
  _traj_id_type traj_id;

   typedef ros::Time _start_time_type;
  _start_time_type start_time;

   typedef double _duration_type;
  _duration_type duration;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef double _yaw_rate_type;
  _yaw_rate_type yaw_rate;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _position_type;
  _position_type position;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _velocity_type;
  _velocity_type velocity;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _acceleration_type;
  _acceleration_type acceleration;

   typedef uint32_t _current_seq_type;
  _current_seq_type current_seq;





  typedef boost::shared_ptr< ::multi_bspline_opt::BsplineTraj_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::multi_bspline_opt::BsplineTraj_<ContainerAllocator> const> ConstPtr;

}; // struct BsplineTraj_

typedef ::multi_bspline_opt::BsplineTraj_<std::allocator<void> > BsplineTraj;

typedef boost::shared_ptr< ::multi_bspline_opt::BsplineTraj > BsplineTrajPtr;
typedef boost::shared_ptr< ::multi_bspline_opt::BsplineTraj const> BsplineTrajConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::multi_bspline_opt::BsplineTraj_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::multi_bspline_opt::BsplineTraj_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::multi_bspline_opt::BsplineTraj_<ContainerAllocator1> & lhs, const ::multi_bspline_opt::BsplineTraj_<ContainerAllocator2> & rhs)
{
  return lhs.drone_id == rhs.drone_id &&
    lhs.traj_id == rhs.traj_id &&
    lhs.start_time == rhs.start_time &&
    lhs.duration == rhs.duration &&
    lhs.yaw == rhs.yaw &&
    lhs.yaw_rate == rhs.yaw_rate &&
    lhs.position == rhs.position &&
    lhs.velocity == rhs.velocity &&
    lhs.acceleration == rhs.acceleration &&
    lhs.current_seq == rhs.current_seq;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::multi_bspline_opt::BsplineTraj_<ContainerAllocator1> & lhs, const ::multi_bspline_opt::BsplineTraj_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace multi_bspline_opt

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::multi_bspline_opt::BsplineTraj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multi_bspline_opt::BsplineTraj_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multi_bspline_opt::BsplineTraj_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multi_bspline_opt::BsplineTraj_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multi_bspline_opt::BsplineTraj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multi_bspline_opt::BsplineTraj_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::multi_bspline_opt::BsplineTraj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c277c0fe692a3c44cb39de5d41a0fe4c";
  }

  static const char* value(const ::multi_bspline_opt::BsplineTraj_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc277c0fe692a3c44ULL;
  static const uint64_t static_value2 = 0xcb39de5d41a0fe4cULL;
};

template<class ContainerAllocator>
struct DataType< ::multi_bspline_opt::BsplineTraj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "multi_bspline_opt/BsplineTraj";
  }

  static const char* value(const ::multi_bspline_opt::BsplineTraj_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::multi_bspline_opt::BsplineTraj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# std_msgs/Header header\n"
"\n"
"int32 drone_id\n"
"int64 traj_id\n"
"time start_time\n"
"float64 duration\n"
"\n"
"float64 yaw\n"
"float64 yaw_rate\n"
"\n"
"geometry_msgs/Point[] position\n"
"geometry_msgs/Point[] velocity\n"
"geometry_msgs/Point[] acceleration\n"
"\n"
"uint32 current_seq\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::multi_bspline_opt::BsplineTraj_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::multi_bspline_opt::BsplineTraj_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.drone_id);
      stream.next(m.traj_id);
      stream.next(m.start_time);
      stream.next(m.duration);
      stream.next(m.yaw);
      stream.next(m.yaw_rate);
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.acceleration);
      stream.next(m.current_seq);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BsplineTraj_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::multi_bspline_opt::BsplineTraj_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::multi_bspline_opt::BsplineTraj_<ContainerAllocator>& v)
  {
    s << indent << "drone_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.drone_id);
    s << indent << "traj_id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.traj_id);
    s << indent << "start_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.start_time);
    s << indent << "duration: ";
    Printer<double>::stream(s, indent + "  ", v.duration);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "yaw_rate: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_rate);
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.position[i]);
    }
    s << indent << "velocity[]" << std::endl;
    for (size_t i = 0; i < v.velocity.size(); ++i)
    {
      s << indent << "  velocity[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.velocity[i]);
    }
    s << indent << "acceleration[]" << std::endl;
    for (size_t i = 0; i < v.acceleration.size(); ++i)
    {
      s << indent << "  acceleration[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.acceleration[i]);
    }
    s << indent << "current_seq: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.current_seq);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MULTI_BSPLINE_OPT_MESSAGE_BSPLINETRAJ_H
